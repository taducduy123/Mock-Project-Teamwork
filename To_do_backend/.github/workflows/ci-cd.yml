name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/todo-api
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/todo-frontend
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==================== Backend Tests ====================
  backend-test:
    name: Backend - Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'To_do_backend/requirements/*.txt'
      
      - name: Install dependencies
        working-directory: ./To_do_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
      
      - name: Run linting
        working-directory: ./To_do_backend
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --max-complexity=10 --max-line-length=127 --statistics || true
      
      - name: Run type checking
        working-directory: ./To_do_backend
        run: |
          mypy src/ --ignore-missing-imports || true
        continue-on-error: true
      
      - name: Run tests
        working-directory: ./To_do_backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./To_do_backend/coverage.xml
          flags: backend
          fail_ci_if_error: false
        continue-on-error: true

  # ==================== Frontend Tests ====================
  frontend-test:
    name: Frontend - Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'todo-frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./todo-frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./todo-frontend
        run: npm run lint || echo "No lint script found"
        continue-on-error: true
      
      - name: Run tests
        working-directory: ./todo-frontend
        run: npm test -- --passWithNoTests --watchAll=false
        env:
          CI: true
      
      - name: Build application
        working-directory: ./todo-frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: todo-frontend/build/
          retention-days: 7

  # ==================== Backend Docker Build & Push ====================
  backend-docker:
    name: Backend - Build & Push Docker Image
    needs: backend-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./To_do_backend
          file: ./To_do_backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache,mode=max
      
      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  # ==================== Frontend Docker Build & Push ====================
  frontend-docker:
    name: Frontend - Build & Push Docker Image
    needs: frontend-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./todo-frontend
          file: ./todo-frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache,mode=max
      
      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  # ==================== Security Scan ====================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './To_do_backend'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './todo-frontend'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: '.'
        continue-on-error: true

  # ==================== Deploy Notification ====================
  notify:
    name: Deployment Notification
    needs: [backend-docker, frontend-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Send notification
        run: |
          echo "ðŸš€ Deployment successful!"
          echo "Backend: ${{ env.BACKEND_IMAGE }}:latest"
          echo "Frontend: ${{ env.FRONTEND_IMAGE }}:latest"